#!/usr/local/bin/ruby
#
# Bayesian spam filter
#
# Chip Camden, July 2010
#
require 'optparse'
require 'isspam'

mode = nil
database = "~/.isspam.db"
max = nil

optparse = OptionParser.new do |opts|
  opts.banner = 'usage: isspam.rb [-ynpds] [-f database] [-m max]'

  opts.on('-y', '--yes', 'Add message to database not spam') do
    raise "More than one mode specified" if mode
    mode = :yes
  end

  opts.on('-n', '--no', 'Add message to database as not spam') do
    raise "More than one mode specified" if mode
    mode = :no
  end

  opts.on('-p', '--probability', 'Determine probability that this is spam') do
    raise "More than one mode specified" if mode
    mode = :well?
  end

  opts.on('-d', '--dump', 'Dump all stats') do
    raise "More than one mode specified" if mode
    mode = :dump
  end

  opts.on('-s', '--stats', 'Output general stats') do
    raise "More than one mode specified" if mode
    mode = :stats
  end

  opts.on('-f', '--file database', 'Specify spam database') do |file|
    database = file
  end

  opts.on('-m', '--max maxphrase', 'Specify maximum phrase length (default = 3)') do |m|
    max = m.to_i
  end

end

begin
  optparse.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  puts e
  puts optparse
  exit 1
end

if mode
  isspam = IsSpam.new File.expand_path(database)
  case mode
    when :dump
      puts isspam.dump
    when :stats
      stats = isspam.stats
      puts "#{stats[:phrases]} unique phrases in #{stats[:total]} messages: #{stats[:spam]} spam, #{stats[:good]} good"
    else
      isspam.max_phrase_length = max if max && max > 0
      $<.readlines.join.split(/^From /).each do |msg|
	rslt = isspam.send(mode, msg) if msg.length > 0
	puts rslt if rslt
      end
  end
end
