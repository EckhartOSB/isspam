#!/usr/local/bin/ruby
#
# Bayesian spam filter
#
# Chip Camden, July 2010
#
require 'optparse'
require 'isspam'

mode = nil
database = "~/.isspam.db"
max = nil
verbose = false

optparse = OptionParser.new do |opts|
  opts.banner = 'usage: isspam.rb [-ynpdsv] [-f database] [-m max]'

  opts.on('-y', '--yes', 'Add message to database not spam') do
    raise "More than one mode specified" if mode
    mode = :yes
  end

  opts.on('-n', '--no', 'Add message to database as not spam') do
    raise "More than one mode specified" if mode
    mode = :no
  end

  opts.on('-p', '--probability', 'Determine probability that this is spam') do
    raise "More than one mode specified" if mode
    mode = :well?
  end

  opts.on('-d', '--dump', 'Dump all stats') do
    raise "More than one mode specified" if mode
    mode = :dump
  end

  opts.on('-s', '--stats', 'Output general stats') do
    raise "More than one mode specified" if mode
    mode = :stats
  end

  opts.on('-f', '--file database', 'Specify spam database') do |file|
    database = file
  end

  opts.on('-v', '--verbose', 'Get more output') do
    verbose = true
  end

  opts.on('-m', '--max maxphrase', 'Specify maximum phrase length (default = 3)') do |m|
    max = m.to_i
  end

end

begin
  optparse.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  puts e
  puts optparse
  exit 1
end

if mode
  db = File.expand_path database
  puts "Database: #{db}" if verbose
  isspam = IsSpam.new db
  msglen = 0
  isspam.onprogress do |msg|
    print "\x08"*msglen + msg + "    "
    msglen = msg.length + 4
  end if verbose
  case mode
    when :dump
      isspam.dump
    when :stats
      stats = isspam.stats
      if verbose
        puts "#{stats[:phrases]} unique phrases in #{stats[:total]} messages: #{stats[:spam]} spam, #{stats[:good]} good"
      else
        puts "phrases:#{stats[:phrases]} messages:#{stats[:total]} spam:#{stats[:spam]} good:#{stats[:good]}"
      end
    else
      isspam.max_phrase_length = max if max && max > 0
      count = 0
      msgs = $<.readlines.join.split(/^From /).reject {|msg| msg.length < 2}
      msgs.each do |msg|
	if verbose
	  print "Message #{count+=1}/#{msgs.size}\t"
	  $stdout.flush
	end
	rslt = isspam.send(mode, msg) if msg.length > 0
	if rslt
	  printf("%3.3f\n", rslt)
	else
	  puts "" if verbose
	end
      end
  end
end
